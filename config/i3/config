# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+w kill

# start dmenu (a program launcher)
bindsym $mod+space exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# split in horizontal orientation
bindsym $mod+c split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+Shift+s layout stacking
bindsym $mod+Shift+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+t floating toggle

# change focus between tiling / floating windows
bindsym $mod+Shift+t focus mode_toggle

# focus the parent container
#bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10
bindsym Control+Right workspace next
bindsym Control+Left workspace prev
bindsym $mod+Control+j workspace prev
bindsym $mod+Control+k workspace next

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10

# Define scratchpad
exec --no-startup-id st -n dropdown
	# Dropdown gets moved into scratchpad automatically
for_window [instance="dropdown"] move scratchpad
	# Scratchpad takes up entire width but isn't that tall
for_window [instance="dropdown"] resize set 1920 350
	# Scratchpad is moved to the topleft corner
for_window [instance="dropdown"] move position 0 0

# Toggle scratchpad
bindsym $mod+d [instance="dropdown"] scratchpad show

# Open a cheatsheet
bindsym $mod+p exec xdg-open ~/Cheatsheets/$(ls -1 ~/Cheatsheets | dmenu)

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

mode "mouse" {
        bindsym h exec "xdotool mousemove_relative -- -10 0"
        bindsym j exec "xdotool mousemove_relative -- 0 10"
        bindsym k exec "xdotool mousemove_relative -- 0 -10"
        bindsym l exec "xdotool mousemove_relative -- 10 0"

        bindsym Shift+h exec "xdotool mousemove_relative -- -50 0"
        bindsym Shift+j exec "xdotool mousemove_relative -- 0 50"
        bindsym Shift+k exec "xdotool mousemove_relative -- 0 -50"
        bindsym Shift+l exec "xdotool mousemove_relative -- 50 0"

        bindsym Control+h exec "xdotool mousemove_relative -- -1 0"
        bindsym Control+j exec "xdotool mousemove_relative -- 0 1"
        bindsym Control+k exec "xdotool mousemove_relative -- 0 -1"
        bindsym Control+l exec "xdotool mousemove_relative -- 1 0"

        # Scrolling
        bindsym d exec "xdotool click --delay 0 5"
        bindsym u exec "xdotool click --delay 0 4"
        # bindsym u exec "[ -e /tmp/control_mouse ] || { touch /tmp/control_mouse; xdotool click --repeat 6 4; sleep 0.1; rm /tmp/control_mouse; }"

        bindsym Return exec "xdotool click 1"
        bindsym Shift+Return exec "xdotool click 3"

        # back to normal: Enter or Escape
        bindsym Escape mode "default"
        bindsym $mod+s mode "default"
}

bindsym $mod+s mode "mouse"

mode "don't capture keypresses" {
    bindsym $mod+Escape mode "default"
}

bindsym $mod+Escape mode "don't capture keypresses"

# Load the background from the previous time
exec ~/.fehbg

# Start sxhkd
exec sxhkd &
